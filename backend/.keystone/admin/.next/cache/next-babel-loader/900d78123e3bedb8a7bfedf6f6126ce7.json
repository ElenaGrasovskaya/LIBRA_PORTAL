{"ast":null,"code":"/* eslint-disable import/order */\nimport { config, createSchema } from '@keystone-next/keystone/schema';\nimport { User } from './schemas/User';\nimport { Item } from './schemas/Item';\nimport { Order } from './schemas/Order';\nimport 'dotenv/config';\nimport { createAuth } from '@keystone-next/auth';\nimport { withItemData, statelessSessions } from '@keystone-next/keystone/session';\nconst databaseURL = process.env.DATABASE_URL || 'mongodb://localho st/libraportal';\nconst sessionConfig = {\n  maxAge: 60 * 60 * 24 * 360,\n  // How long should they stay signed in\n  secret: process.env.COOKIE_SECRET\n};\nconst {\n  withAuth\n} = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  secretField: 'password',\n  initFirstItem: {\n    fields: ['name', 'email', 'password'] // TODO: Add in initial roles here\n\n  }\n});\nexport default withAuth(config({\n  server: {\n    cors: {\n      origin: [\"*\"],\n      credentials: true,\n      methods: \"GET,HEAD,PUT,PATCH,POST,DELETE\",\n      preflightContinue: true,\n      allowedHeaders: \"*\"\n    }\n  },\n  db: {\n    adapter: 'mongoose',\n    url: databaseURL // TODO: Add data seeding here\n\n  },\n  lists: createSchema({\n    // Schema items go in here\n    User,\n    Item,\n    Order\n  }),\n  ui: {\n    // TODO: change this for roles\n    isAccessAllowed: ({\n      session\n    }) => // console.log(session);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    !!(session === null || session === void 0 ? void 0 : session.data)\n  },\n  session: withItemData(statelessSessions(sessionConfig), {\n    // GraphQL query\n    User: 'id name email'\n  }) // TODO:Add session values here\n\n}));","map":null,"metadata":{},"sourceType":"module"}