input ItemRelateToOneInput {
  create: ItemCreateInput
  connect: ItemWhereUniqueInput
  disconnect: ItemWhereUniqueInput
  disconnectAll: Boolean
}

input OrderRelateToOneInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: OrderWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  itemsCreated: Item
  ordersCreated: Order
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  itemsCreated: ItemWhereInput
  itemsCreated_is_null: Boolean
  ordersCreated: OrderWhereInput
  ordersCreated_is_null: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthIssuedAt_not: String
  magicAuthIssuedAt_lt: String
  magicAuthIssuedAt_lte: String
  magicAuthIssuedAt_gt: String
  magicAuthIssuedAt_gte: String
  magicAuthIssuedAt_in: [String]
  magicAuthIssuedAt_not_in: [String]
  magicAuthRedeemedAt: String
  magicAuthRedeemedAt_not: String
  magicAuthRedeemedAt_lt: String
  magicAuthRedeemedAt_lte: String
  magicAuthRedeemedAt_gt: String
  magicAuthRedeemedAt_gte: String
  magicAuthRedeemedAt_in: [String]
  magicAuthRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  itemsCreated_ASC
  itemsCreated_DESC
  ordersCreated_ASC
  ordersCreated_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
  magicAuthIssuedAt_ASC
  magicAuthIssuedAt_DESC
  magicAuthRedeemedAt_ASC
  magicAuthRedeemedAt_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  itemsCreated: ItemRelateToOneInput
  ordersCreated: OrderRelateToOneInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  itemsCreated: ItemRelateToOneInput
  ordersCreated: OrderRelateToOneInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Item {
  id: ID!
  name: String
  author: User
  order: Order
  description: String
  status: String
  price: Int
  dateCreated: String
}

input ItemWhereInput {
  AND: [ItemWhereInput]
  OR: [ItemWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  author: UserWhereInput
  author_is_null: Boolean
  order: OrderWhereInput
  order_is_null: Boolean
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  status: String
  status_not: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  status_i: String
  status_not_i: String
  status_contains_i: String
  status_not_contains_i: String
  status_starts_with_i: String
  status_not_starts_with_i: String
  status_ends_with_i: String
  status_not_ends_with_i: String
  status_in: [String]
  status_not_in: [String]
  price: Int
  price_not: Int
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int]
  price_not_in: [Int]
  dateCreated: String
  dateCreated_not: String
  dateCreated_lt: String
  dateCreated_lte: String
  dateCreated_gt: String
  dateCreated_gte: String
  dateCreated_in: [String]
  dateCreated_not_in: [String]
}

input ItemWhereUniqueInput {
  id: ID!
}

enum SortItemsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  author_ASC
  author_DESC
  order_ASC
  order_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  price_ASC
  price_DESC
  dateCreated_ASC
  dateCreated_DESC
}

input ItemUpdateInput {
  name: String
  author: UserRelateToOneInput
  order: OrderRelateToOneInput
  description: String
  status: String
  price: Int
  dateCreated: String
}

input ItemsUpdateInput {
  id: ID!
  data: ItemUpdateInput
}

input ItemCreateInput {
  name: String
  author: UserRelateToOneInput
  order: OrderRelateToOneInput
  description: String
  status: String
  price: Int
  dateCreated: String
}

input ItemsCreateInput {
  data: ItemCreateInput
}

input ItemRelateToManyInput {
  create: [ItemCreateInput]
  connect: [ItemWhereUniqueInput]
  disconnect: [ItemWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Order {
  id: ID!
  name: String
  author: User
  items(where: ItemWhereInput, search: String, sortBy: [SortItemsBy!], orderBy: String, first: Int, skip: Int): [Item!]!
  _itemsMeta(where: ItemWhereInput, search: String, sortBy: [SortItemsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  description: String
  dateCreated: String
  status: String
  clientPrice: Int
  clientPrepay: Int
  clientDept: Int
  expence: Int
  interest: Int
  personalExpence: Int
}

input OrderWhereInput {
  AND: [OrderWhereInput]
  OR: [OrderWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  author: UserWhereInput
  author_is_null: Boolean

  """ condition must be true for all nodes """
  items_every: ItemWhereInput

  """ condition must be true for at least 1 node """
  items_some: ItemWhereInput

  """ condition must be false for all nodes """
  items_none: ItemWhereInput
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  dateCreated: String
  dateCreated_not: String
  dateCreated_lt: String
  dateCreated_lte: String
  dateCreated_gt: String
  dateCreated_gte: String
  dateCreated_in: [String]
  dateCreated_not_in: [String]
  status: String
  status_not: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  status_i: String
  status_not_i: String
  status_contains_i: String
  status_not_contains_i: String
  status_starts_with_i: String
  status_not_starts_with_i: String
  status_ends_with_i: String
  status_not_ends_with_i: String
  status_in: [String]
  status_not_in: [String]
  clientPrice: Int
  clientPrice_not: Int
  clientPrice_lt: Int
  clientPrice_lte: Int
  clientPrice_gt: Int
  clientPrice_gte: Int
  clientPrice_in: [Int]
  clientPrice_not_in: [Int]
  clientPrepay: Int
  clientPrepay_not: Int
  clientPrepay_lt: Int
  clientPrepay_lte: Int
  clientPrepay_gt: Int
  clientPrepay_gte: Int
  clientPrepay_in: [Int]
  clientPrepay_not_in: [Int]
  clientDept: Int
  clientDept_not: Int
  clientDept_lt: Int
  clientDept_lte: Int
  clientDept_gt: Int
  clientDept_gte: Int
  clientDept_in: [Int]
  clientDept_not_in: [Int]
  expence: Int
  expence_not: Int
  expence_lt: Int
  expence_lte: Int
  expence_gt: Int
  expence_gte: Int
  expence_in: [Int]
  expence_not_in: [Int]
  interest: Int
  interest_not: Int
  interest_lt: Int
  interest_lte: Int
  interest_gt: Int
  interest_gte: Int
  interest_in: [Int]
  interest_not_in: [Int]
  personalExpence: Int
  personalExpence_not: Int
  personalExpence_lt: Int
  personalExpence_lte: Int
  personalExpence_gt: Int
  personalExpence_gte: Int
  personalExpence_in: [Int]
  personalExpence_not_in: [Int]
}

input OrderWhereUniqueInput {
  id: ID!
}

enum SortOrdersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  author_ASC
  author_DESC
  items_ASC
  items_DESC
  description_ASC
  description_DESC
  dateCreated_ASC
  dateCreated_DESC
  status_ASC
  status_DESC
  clientPrice_ASC
  clientPrice_DESC
  clientPrepay_ASC
  clientPrepay_DESC
  clientDept_ASC
  clientDept_DESC
  expence_ASC
  expence_DESC
  interest_ASC
  interest_DESC
  personalExpence_ASC
  personalExpence_DESC
}

input OrderUpdateInput {
  name: String
  author: UserRelateToOneInput
  items: ItemRelateToManyInput
  description: String
  dateCreated: String
  status: String
  clientPrice: Int
  clientPrepay: Int
  clientDept: Int
  expence: Int
  interest: Int
  personalExpence: Int
}

input OrdersUpdateInput {
  id: ID!
  data: OrderUpdateInput
}

input OrderCreateInput {
  name: String
  author: UserRelateToOneInput
  items: ItemRelateToManyInput
  description: String
  dateCreated: String
  status: String
  clientPrice: Int
  clientPrepay: Int
  clientDept: Int
  expence: Int
  interest: Int
  personalExpence: Int
}

input OrdersCreateInput {
  data: OrderCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta

  """ Search for all Item items which match the where clause. """
  allItems(where: ItemWhereInput, search: String, sortBy: [SortItemsBy!], orderBy: String, first: Int, skip: Int): [Item]

  """ Search for the Item item with the matching ID. """
  Item(where: ItemWhereUniqueInput!): Item

  """ Perform a meta-query on all Item items which match the where clause. """
  _allItemsMeta(where: ItemWhereInput, search: String, sortBy: [SortItemsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Item list. """
  _ItemsMeta: _ListMeta

  """ Search for all Order items which match the where clause. """
  allOrders(where: OrderWhereInput, search: String, sortBy: [SortOrdersBy!], orderBy: String, first: Int, skip: Int): [Order]

  """ Search for the Order item with the matching ID. """
  Order(where: OrderWhereUniqueInput!): Order

  """ Perform a meta-query on all Order items which match the where clause. 
  """
  _allOrdersMeta(where: OrderWhereInput, search: String, sortBy: [SortOrdersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Order list. """
  _OrdersMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]

  """The version of the Keystone application serving this API."""
  appVersion: String
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]

  """ Create a single Item item. """
  createItem(data: ItemCreateInput): Item

  """ Create multiple Item items. """
  createItems(data: [ItemsCreateInput]): [Item]

  """ Update a single Item item by ID. """
  updateItem(id: ID!, data: ItemUpdateInput): Item

  """ Update multiple Item items by ID. """
  updateItems(data: [ItemsUpdateInput]): [Item]

  """ Delete a single Item item by ID. """
  deleteItem(id: ID!): Item

  """ Delete multiple Item items by ID. """
  deleteItems(ids: [ID!]): [Item]

  """ Create a single Order item. """
  createOrder(data: OrderCreateInput): Order

  """ Create multiple Order items. """
  createOrders(data: [OrdersCreateInput]): [Order]

  """ Update a single Order item by ID. """
  updateOrder(id: ID!, data: OrderUpdateInput): Order

  """ Update multiple Order items by ID. """
  updateOrders(data: [OrdersUpdateInput]): [Order]

  """ Delete a single Order item by ID. """
  deleteOrder(id: ID!): Order

  """ Delete multiple Order items by ID. """
  deleteOrders(ids: [ID!]): [Order]
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsHash: String!
  customViewsHash: String
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
